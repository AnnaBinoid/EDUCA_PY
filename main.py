# list_1 = []
# list_1 = list()
# list_1 = [1, 8, 30, 6]
# print(list_1)

# list_1 = []
# print(list_1)
# for i in range(5):
#  list_1.append(i)
#  print(list_1)

# list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list[0])   # 1
# print(list[1])   # 2
# print(list[-1])  # 10
# print(list[-5])  # 6
# print(list[:])   # [1, 2, 3, 4,5, 6, 7, 8, 9, 10]
# print(list[len(list)-2:])  # [9, 10]
# print(list[2:9]) # [3, 4,5, 6, 7, 8, 9]
# print(list[6:-18]) # []
# print(list[0:len(list):6]) # [1, 7]
# print(list[::6]) # [1, 7]

# –ö–æ—Ä—Ç–µ–∂ - –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫
# t = ()

# print(type(t))

# t = (1, )   # –í –∫–æ–Ω—Ü–µ –∑–∞–ø—è—Ç–∞—è, —Ç–æ–≥–¥–∞ –±—É–¥–µ—Ç –∫–æ—Ä—Ç–µ–∂
# print(type(t))

# v = [1, 8, 9]
# print(type(v))

# v = tuple(v)
# print(v)
# print(type(v))

# –†–∞–∑–¥–µ–ª–∏—Ç—å –∫–æ—Ä—Ç–µ–∂ –Ω–∞ —Ç—Ä–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

# a, b, c = v

# print (a, b, c)

# –°–ª–æ–≤–∞—Ä–∏ –∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ

# dictionary = {}
# dictionary['q'] = 'qwerty'  # –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
# dictionary = {'up': '‚Üë', 'left': '‚Üê', 'down': '‚Üì', 'right': '‚Üí'}
# # print(dictionary) # {'up':'‚Üë', 'left':'‚Üê', 'down':'‚Üì', 'right':'‚Üí'}
# # print(dictionary['left']) # ‚Üê —Ç–∏–ø—ã –∫–ª—é—á–µ–π –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
# # print(dictionary['up']) # ‚Üë —Ç–∏–ø—ã –∫–ª—é—á–µ–π –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
# # dictionary['left'] = '‚áê'
# # print(dictionary['left']) # ‚áê
# # print(dictionary['type']) # KeyError: 'type'
# # del dictionary['left'] # —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞

# # print(dictionary.items())
# # for item in dictionary:
# #     print('{} : {}'.format(item,dictionary[item]))

# –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ - —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

# colors = {'red', 'green', 'blue'}
# print(colors) # {'red', 'green', 'blue'}
# colors.add('red')
# print(colors) # {'red', 'green', 'blue'}
# colors.add('gray')  # –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
# print(colors) # {'red', 'green', 'blue','gray'}
# colors.remove('red')  # —É–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
# print(colors) # {'green', 'blue','gray'}
# colors.remove('red') # KeyError: 'red'
# colors.discard('red') # ok –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
# colors.clear()  # —É–¥–∞–ª–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ
# q = set()  # —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞

# –ú–Ω–æ–∂–µ—Å—Ç–≤–∞
# –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ –≤ Python:
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy() # c = {1, 2, 3, 5, 8}  –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
# u = a.union(b) # u = {1, 2, 3, 5, 8, 13, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
# i = a.intersection(b) # i = {8, 2, 5}  –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (—Ç–µ —ç–ª-—Ç—ã. –∫–æ—Ç–æ—Ä—ã–µ –≤ 2—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö)
# dl = a.difference(b) # dl = {1, 3} —Ä–∞–∑–Ω–æ—Å—Ç—å –∏–∑ –∞ –≤ b
# dr = b.difference(a) # dr = {13, 21} —Ä–∞–∑–Ω–æ—Å—Ç—å –∏–∑ b –≤ –∞
# q = a.union(b).difference(a.intersection(b))# {1, 21, 3, 13}

# –ú–Ω–æ–∂–µ—Å—Ç–≤–∞
# –ù–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ –∏–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ(frozenset) ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –±—É–¥—É—Ç
# —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
# a = {1, 2, 3, 5, 8}
# b = frozenset(a)
# print(b) # frozenset({1, 2, 3, 5, 8})

# List Comprehension
# –£ –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. –û–¥–Ω–∞ –∏–∑
# –∫—É–ª—å—Ç–æ–≤—ã—Ö —Ñ–∏—à–µ–∫ Python ‚Äî list comprehension (—Ä–µ–¥–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –Ω–æ –º–æ–∂–Ω–æ
# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ¬´–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ø–∏—Å–∫–∞¬ª). Comprehension –ª–µ–≥–∫–æ —á–∏—Ç–∞—Ç—å, –∏ –∏—Ö
# –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–∞–∫ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ, —Ç–∞–∫ –∏ –æ–ø—ã—Ç–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏. List comprehension ‚Äî —ç—Ç–æ
# —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–µ–π—Å—Ç–≤—É–µ—Ç —Ü–∏–∫–ª for, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
# if-else –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –≤ –∏—Ç–æ–≥–µ –æ–∫–∞–∂–µ—Ç—Å—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ.
# 1. –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Ç—É–∞—Ü–∏—è ‚Äî —Å–ø–∏—Å–æ–∫:
# list_1 = [exp for item in iterable]
# 1. –í—ã–±–æ—Ä–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é:
# list_1 = [exp for item in iterable (if conditional)]

# –ó–∞–¥–∞—á–∞
# –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 100.
# –†–µ—à–µ–Ω–∏–µ:
# 1. –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100
# list_1 = []
# for i in range(1, 101):
# list_1.append(i)
# print(list_1) # [1, 2, 3,..., 100]
# –≠—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫:
# list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]

# –ó–∞–¥–∞—á–∞
# 2. –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ (—Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞)
# list_1 = [i for i in range(1, 101) if i % 2 == 0]# [2, 4, 6,..., 100]
# –î–æ–ø—É—Å—Ç–∏–º, –≤—ã —Ä–µ—à–∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –∫–∞–∂–¥–æ–º—É –∏–∑ —á–∏—Å–µ–ª (–∫–æ—Ä—Ç–µ–∂–∏)
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0]# [(2, 2), (4, 4),..., (100, 100)]
# –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–º–Ω–æ–∂–∞—Ç—å, –¥–µ–ª–∏—Ç—å, –ø—Ä–∏–±–∞–≤–ª—è—Ç—å, –≤—ã—á–∏—Ç–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, —É–º–Ω–æ–∂–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 2.
# list_1 = [i * 2 for i in range(10) if i % 2 == 0]
# print(list_1) # [0, 4, 8, 12, 16]

# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞
# –ú—ã —Å –≤–∞–º–∏ –ª—é–¥–∏, –∞ –ª—é–¥—è–º —Å—É–∂–¥–µ–Ω–æ –æ—à–∏–±–∞—Ç—å—Å—è, –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞
# –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —Å –í–∞–º–∏ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –Ω–∞ Python.
# üî•–°–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:
# ‚óã SyntaxError(–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
# number_first = 5
# number_second = 7
# if number_first > number_second # !!!!!
#  print(number_first)
# # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ :

# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞
# ‚óè IndentationError(–û—à–∏–±–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤)
# number_first = 5
# number_second = 7
# if number_first > number_second:
# print(number_first) # !!!!!
# # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤
# ‚óè TypeError(–¢–∏–ø–æ–≤–∞—è –æ—à–∏–±–∫–∞)
# text = 'Python'
# number = 5
# print(text + number)
# # –ù–µ–ª—å–∑—è —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞

# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞
# ‚óè ZeroDivisionError(–î–µ–ª–µ–Ω–∏–µ –Ω–∞ 0)
# number_first = 5
# number_second = 0
# print(number_first // number_second)
# # –î–µ–ª–∏—Ç—å –Ω–∞ 0 –Ω–µ–ª—å–∑—è
# ‚óè KeyError(–û—à–∏–±–∫–∞ –∫–ª—é—á–∞)
# dictionary = {1: 'Monday', 2: 'Tuesday'}
# print(dictionary[3])
# # –¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞
# ‚óè NameError(–û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
# name = 'Ivan'
# print(names)
# # –ü–µ—Ä–µ–º–µ–Ω–Ω–æ–π names –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
# ‚óè ValueError(–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è)
# text = 'Python'
# print(int(text))
# # –ù–µ–ª—å–∑—è —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ü–µ–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è


# –§—É–Ω–∫—Ü–∏–∏ (–Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö)


# def someNumbers(n, y = 'Hello'):
#     print(y)
#     summa = 0
#     for i in range(1, n+1):
#         summa +=i
#     return summa
# print(someNumbers(5))

# def sum_str(*args): #–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ *
#     res = ''
#     for i in args:
#         res += i
#     return res
# print (sum_str('fjkjdsf', 'jlsjdfj'))

# –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: —Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö —á–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è import modul1 –∏ –≤—ã–∑—ã–≤–∞–µ–º modul1.max1(5,9)
# From modul1 import max1 - –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
# from  modul1 import * - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –º–æ–¥—É–ª–∏
# import modul1 as m1 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã

# –†–µ–∫—É—Ä—Å–∏—è - —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å–∞–º–∞ —Å–µ–±—è

# def fib(n):
#     if n in [1, 2]:
#         return 1
#     return fib(n-1) + fib(n-2)
# list_1 = []
# for i in range(1, 10):
#     list_1.append(fib(i))
# print(list_1)

# –ê–ª–≥–æ—Ä–∏—Ç–º—ã = –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

# –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - —Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π. –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫.

# def quick_sort(array):
#     if len(array) <= 1:
#         return array
#     else:
#         pivot = array[0]
#     less = [i for i in array[1:] if i <= pivot]
#     greater = [i for i in array[1:] if i > pivot]
#     return quick_sort(less) + [pivot] + quick_sort(greater)
# print(quick_sort([14, 5, 9, 6, 3,58, 7, 5, 2, 7]))

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ. –î–µ–ª–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞–¥–≤–æ–µ, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —É–ø–æ–ø—Ä—è–¥–æ—á–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —ç–ª-—Ç–æ–≤

# def merge_sort(nums):
#     if len(nums) > 1:
#         mid = len(nums) // 2
#         left = nums[:mid]
#         right = nums[mid:]
#         merge_sort(left)
#         merge_sort(right)
#         i = j = k = 0
#         while i < len(left) and j < len(right):
#             if left[i] < right[j]:
#                 nums[k] = left[i]
#                 i += 1
#             else:
#                 nums[k] = right[j]
#                 j += 1
#             k += 1
#         while i < len(left):
#             nums[k] = left[i]
#             i += 1
#             k += 1
#         while j < len(right):
#             nums[k] = right[i]
#             j += 1
#             k += 1

# list1 = [1, 87, 12, 12, 9, 6 ,3]
# merge_sort(list1)
# print(list1)

# –ó–∞–¥–∞—á–∞ ‚Ññ39. –†–µ—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö
# –î–∞–Ω—ã –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ (–≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–∞–∫–æ–º –æ–Ω–∏ –∏–¥—É—Ç –≤ –ø–µ—Ä–≤–æ–º
# –º–∞—Å—Å–∏–≤–µ), –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–º –º–∞—Å—Å–∏–≤–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç
# —á–∏—Å–ª–æ N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–µ—Ä–≤–æ–º –º–∞—Å—Å–∏–≤–µ, –∑–∞—Ç–µ–º N
# —á–∏—Å–µ–ª - —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞. –ó–∞—Ç–µ–º —á–∏—Å–ª–æ M - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ –≤—Ç–æ—Ä–æ–º –º–∞—Å—Å–∏–≤–µ. –ó–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
# –í–≤–æ–¥:
# 7
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1 
# –í—ã–≤–æ–¥:
# 7 3 3 2 12

# def cross_arrays(first_list, second_list):
#     second_set = set(second_list)
#     result = []
#     for i in first_list:
#         if i not in second_list:
#             result.append(i)
#     return result

# first_size = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ 1 –º–∞—Å—Å–∏–≤–µ: '))
# first_list = []
# for i in range(first_size):
#     first_list.append(int(input(f"–í–≤–µ–¥–∏—Ç–µ {i+1} —á–∏—Å–ª–æ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞: ")))

# second_size = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ 2 –º–∞—Å—Å–∏–≤–µ: '))
# second_list = []
# for i in range(second_size):
#     second_list.append(int(input(f"–í–≤–µ–¥–∏—Ç–µ {i+1} —á–∏—Å–ª–æ –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞: ")))

# print(cross_arrays(first_list, second_list))

# –ó–∞–¥–∞—á–∞ ‚Ññ41. –†–µ—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö
# –î–∞–Ω –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤ –¥–∞–Ω–Ω–æ–º 
# –º–∞—Å—Å–∏–≤–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–≤–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –∏, –ø—Ä–∏
# —ç—Ç–æ–º, –æ–±–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω–æ–≥–æ. –°–Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∏—Ç—Å—è —á–∏—Å–ª–æ N ‚Äî 
# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ. –î–∞–ª–µ–µ –∑–∞–ø–∏—Å–∞–Ω—ã N —á–∏—Å–µ–ª ‚Äî —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞. 
# –ú–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
# –í–≤–æ–¥:
# 5
# 1 2 3 4 5
# –í—ã–≤–æ–¥:
# 0
# –í–≤–æ–¥:
# 5
# 1 5 1 5 1
# –í—ã–≤–æ–¥:
# 2

# def more_then_neighbors(first_list):
#     count = 0
#     this_element = first_list[1]
    
#     for i in range(len(first_list) - 1):
#         if first_list[i] > first_list[i - 1] and first_list[i] > first_list[i + 1]:
#             count += 1
#     return count

# first_size = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ 1 –º–∞—Å—Å–∏–≤–µ: '))
# first_list = []
# for i in range(first_size):
#     first_list.append(int(input(f"–í–≤–µ–¥–∏—Ç–µ {i+1} —á–∏—Å–ª–æ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞: ")))

# print(more_then_neighbors(first_list))


# –ó–∞–¥–∞—á–∞ ‚Ññ43.
# –î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ü–æ—Å—á–∏—Ç–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–º –ø–∞—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ä–∞–≤–Ω—ã—Ö –¥—Ä—É–≥ –¥—Ä—É–≥—É. 
# –°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –ª—é–±—ã–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ä–∞–≤–Ω—ã–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –æ–±—Ä–∞–∑—É—é—Ç –æ–¥–Ω—É –ø–∞—Ä—É,
# –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å. –í–≤–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –í—Å–µ —á–∏—Å–ª–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è
# –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.
# –í–≤–æ–¥:
# 1 2 3 2 3
# –í—ã–≤–æ–¥:
# 2

# def count_of_pairs(first_list):
#     count = 0
#     pairs = 0
#     for i in range(len(first_list)):
#         if first_list[i] in first_list:
#             count += 1
#             if count == 2:
#                 pairs += 1
#                 count = 0
#     return pairs

# first_size = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ: '))
# first_list = []
# for i in range(first_size):
#     first_list.append(int(input(f"–í–≤–µ–¥–∏—Ç–µ {i+1} —á–∏—Å–ª–æ –º–∞—Å—Å–∏–≤–∞: ")))

# print(count_of_pairs(first_list))

# –ó–∞–¥–∞—á–∞ ‚Ññ45. –†–µ—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö
# –î–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ m –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ —Å—É–º–º–∞
# –¥–µ–ª–∏—Ç–µ–ª–µ–π —á–∏—Å–ª–∞ n (–≤–∫–ª—é—á–∞—è 1, –Ω–æ –∏—Å–∫–ª—é—á–∞—è —Å–∞–º–æ n) —Ä–∞–≤–Ω–∞ —á–∏—Å–ª—É m –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
# –ù–∞–ø—Ä–∏–º–µ—Ä, 220 –∏ 284 ‚Äì –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞. –ü–æ –¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É k –≤—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ 
# –ø–∞—Ä—ã –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç k. –ü—Ä–æ–≥—Ä–∞–º–º–∞
# –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –æ–¥–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ k, –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–µ–µ 10**5.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–∞—Ä—ã –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ
# –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç k. –ü–∞—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–∞–º–∏.
# –ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∏—Å–µ–ª –Ω–æ–≤—É—é
# –ø–∞—Ä—É –Ω–µ –¥–∞–µ—Ç).
# –í–≤–æ–¥: 
# 300 
# –í—ã–≤–æ–¥:
# 220 284

# def sum_of_divisors (input_numer: int):
#     sum_result = 0
#     for i in range(1, input_numer // 2 + 1):
#         if input_numer % i == 0:
#             sum_result += i
#     return sum_result

# def friendly_numbers (input_num: int):
#     find = set()
#     for i in range(1, input_num + 1): # i = 220
#         sum_temp_number = sum_of_divisors(i)  # 284
#         sum2 = sum_of_divisors(sum_temp_number)
#         if sum2 == i and sum_temp_number != i and i not in find and sum_temp_number not in find:
#             print(sum_temp_number, i)
#             find.add(i)

# input_k = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ k: "))
# print(sum_of_divisors(input_k))
# friendly_numbers(input_k)

# map - –±–µ—Ä–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å –Ω–∏–º–∏ –∫–∞–∫—É—é-—Ç–æ —Ñ—É–Ω–∫—Ü–∏—é (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –∏ —Ç–¥)
# def square(a):
#     return a ** 2

# some_list = [1, 2, 3, 4, 5]
# print(list(map(square, some_list))) # –±—ã–ª–∏ —á–∏—Å–ª–∞, –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ—á–∫–∏


# # lambda - –≤–µ—Å—å —Ü–∏–∫–ª –ø–∏—à–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É, –≥–¥–µ –≤—Å–µ –∑–∞–¥–∞–µ–º.
# some_list = [1, 2, 3, 4, 5]
# # print(list(map(lambda a: a ** 2, some_list)))
# print(list(filter(lambda x: x % 2 == 0, some_list))) # –ü–µ—Ä–µ–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø—Ä–∞–≤–∏–ª—É , –≤ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏

# zip –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç–ª-—Ç—ã —Å –æ–¥–Ω–∞–∫–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –≤ –∫–æ—Ä—Ç–µ–∂–∏
# some_list = [1, 2, 3, 4, 5]
# some_list2 = ["1", "2", "3", "4", "5"]
# print(list(zip(some_list, some_list2)))

# for i, j in zip(some_list, some_list2): # –î–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, —Ç.–∫. 2 —Å–ø–∏—Å–∫–∞
#     print(i, j)

# enumerate –ø–æ—Ö–æ–∂ –Ω–∞ –∑–∏–ø, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞
# some_list = [1, 2, 3, 4, 5]
# print(list(enumerate(some_list))) # –∏–Ω–¥–µ–∫—Å - –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã

# 47. –£ –≤–∞—Å –µ—Å—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å(—Ç–∞–∫ —á–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –∫–æ–¥ –≤ –≥–ª—É–±–∏–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã 
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑ –∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ —Å–ª–æ–º–∞—Ç—å):

# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Å–ø–∏—Å–æ–∫
# transormed_values = list(map(transformation, values))

# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–∞—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º –∫–æ–¥–æ–º - –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –∑–∞–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ transformation.
# –û–¥–Ω–∞–∫–æ –≤—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –¥–ª—è –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏–∫–∞–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π, 
# –∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å.
# –ù–∞–ø–∏—à–∏—Ç–µ —Ç–∞–∫–æ–µ –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ transformation, —á—Ç–æ–±—ã transformed_values –ø–æ–ª—É—á–∏–ª—Å—è –∫–æ–ø–∏–µ–π values.

# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
# transormed_values = list(map(lambda x: x, values))
# if values == transormed_values:
#     print(values)
#     print(transormed_values)
#     print("ok")
# else:
#     print(values)
#     print(transormed_values)
#     print("fail")

# –°–ø–æ—Å–æ–± 2:

# values = [1, 23, 42, 'asdfg']
# transformed_values = list(map(lambda x: x, values))
# if values == transformed_values:
#     print('ok')
# else:
#     print('fail')


# –ü–ª–∞–Ω–µ—Ç—ã –≤—Ä–∞—â–∞—é—Ç—Å—è –≤–æ–∫—Ä—É–≥ –∑–≤–µ–∑–¥ –ø–æ —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–º –æ—Ä–±–∏—Ç–∞–º. –ù–∞–∑–æ–≤–µ–º —Å–∞–º–æ–π –¥–∞–ª–µ–∫–æ–π –ø–ª–∞–Ω–µ—Ç–æ–π —Ç—É, –æ—Ä–±–∏—Ç–∞ –∫–æ—Ç–æ—Ä–æ–π –∏–º–µ–µ—Ç 
# —Å–∞–º—É—é –±–æ–ª—å—à—É—é –ø–ª–æ—â–∞–¥—å. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é find_farthest_orbit(list_of_orbits), –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–µ–¥–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–±–∏—Ç –ø–ª–∞–Ω–µ—Ç –Ω–∞–π–¥–µ—Ç —Ç—É
# , –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–∞–º–∞—è –¥–∞–ª–µ–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞. –ö—Ä—É–≥–æ–≤—ã–µ –æ—Ä–±–∏—Ç—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ: –≤—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —É –≤–∞—à–µ–π –∑–≤–µ–∑–¥—ã —Ç–∞–∫–∏—Ö –ø–ª–∞–Ω–µ—Ç 
# –Ω–µ—Ç, –∑–∞—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–∏ –±—ã–ª–∏ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ –∫—Ä—É–≥–æ–≤—ã–µ –æ—Ä–±–∏—Ç—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 
# –∫–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–ª–∏–Ω—ã –ø–æ–ª—É–æ—Å–µ–π —ç–ª–ª–∏–ø—Å–∞ –æ—Ä–±–∏—Ç—ã —Å–∞–º–æ–π –¥–∞–ª–µ–∫–æ–π –ø–ª–∞–Ω–µ—Ç—ã. –ö–∞–∂–¥–∞—è –æ—Ä–±–∏—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è 
# –∫–æ—Ä—Ç–µ–∂ –∏–∑ –ø–∞—Ä—ã —á–∏—Å–µ–ª - –ø–æ–ª—É–æ—Å–µ–π –µ–µ —ç–ª–ª–∏–ø—Å–∞. –ü–ª–æ—â–∞–¥—å —ç–ª–ª–∏–ø—Å–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ S = piab, 
# –≥–¥–µ a –∏ b - –¥–ª–∏–Ω—ã –ø–æ–ª—É–æ—Å–µ–π —ç–ª–ª–∏–ø—Å–∞. –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∏—Å–æ—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–¥—Å–∫–∞–∑–∫–∞: 
# –ø—Ä–æ—â–µ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç –Ω–∞–π—Ç–∏ —ç–ª–ª–∏–ø—Å –≤ –¥–≤–∞ —à–∞–≥–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å —Å–∞–º—É—é –±–æ–ª—å—à—É—é –ø–ª–æ—â–∞–¥—å —ç–ª–ª–∏–ø—Å–∞, –∞ –∑–∞—Ç–µ–º –Ω–∞–π—Ç–∏ 
# –∏ —Å–∞–º —ç–ª–ª–∏–ø—Å, –∏–º–µ—é—â–∏–π —Ç–∞–∫—É—é –ø–ª–æ—â–∞–¥—å. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å–∞–º–∞—è –¥–∞–ª–µ–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞
# –í–≤–æ–¥:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# –í—ã–≤–æ–¥:
# 2.5 10

# def find_farthest_orbit(orbits):
#     elepses = list(filter(lambda x: x[0] != x[1], orbits))
#     print(elepses)
#     tnp_s = elepses[0][0] * elepses[0][1]
#     index_max = 0
#     for i in range(1, len(elepses)):
#         if elepses[i][0] * elepses[i][1] > tnp_s:
#             tnp_s = elepses[i][0] * elepses[i][1]
#             index_max = i
#     return elepses[index_max]

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–π–¥–µ—Ç –æ—Ç–ª–∏—á–∏—è –º–µ–∂–¥—É –∏–Ω–¥–µ–π—Ü–∞–º–∏ –∏ –±–ª–µ–¥–Ω–æ–ª–∏—Ü—ã–º–∏ (–∏–ª–∏
# –ë–µ–ª–æ–π —Ä–æ–∑–æ–π –∏ –ö—Ä–∞—Å–Ω–æ–π —Ä–æ–∑–æ–π, –∫—Ç–æ –∏—Ö —Ä–∞–∑–±–µ—Ä–µ—Ç).
# –ò–∑ –∫–∞–∂–¥—ã—Ö –¥–≤—É—Ö –Ω–∞–±–æ—Ä–æ–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –≤—ã–±—Ä–∞—Ç—å –æ–±—â–∏–µ, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ 1 –∏–ª–∏ 3, –±–µ–∑
# –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. –í—ã–≤–µ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ & –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª–∞–º–∏.
# –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:
# –í–≤–æ–¥–∏—Ç—Å—è —á–∏—Å–ª–æ –ø - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ –∏–∑ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∑–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
# –ó–∞—Ç–µ–º 2 * –ø —Å—Ç—Ä–æ–∫ —Å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.

# –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
# –í—ã–≤–µ—Å—Ç–∏ –ø —Å—Ç—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–∏—Å–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ &, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª–∞–º–∏.

# –í–≤–æ–¥. 
# 3
# 9 28 21 23 12 41
# 6 21 18 26 41 18 23 53
# 18 4 25 31 15 20 31 1
# 2 13 10 28 12
# 10 31 23 13 121 17 9 18
# 31 9 3 10 121 4 14 21

# –í—ã–≤–æ–¥:
# 41 & 23 & 21
# 121 & 31

n = int(input())
some_list = [[i for i in input().split() if i[-1] in ('1', '3')] for i in range(2 * n)]
print(some_list)
for ind in range(0, len(some_list) - 1, 2):
    res = list(set(some_list[ind]).intersection(set(some_list[ind + 1])))
    res = list(map(int, res))
    print(*sorted(res, reverse=True), sep=' & ')
